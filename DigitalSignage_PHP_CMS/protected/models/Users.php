<?php

/**
 * This is the model class for table "users".
 *
 * The followings are the available columns in table 'users':
 * @property string $uid
 * @property string $username
 * @property string $email
 * @property string $password
 * @property string $salt
 * @property string $name
 * @property integer $active
 * @property integer $activation_code
 * @property integer $edit_users
 * @property integer $manage_workspaces
 * @property string $date_of_creation
 * @property string $date_of_update
 * @property string $date_of_last_access
 * @property string $date_of_password_last_change
 * @property integer $deleted
 *
 * The followings are the available model relations:
 * @property ProjectData[] $pD
 * @property Reports[] $r
 * @property WorkspaceData[] $wd
 */
class Users extends CActiveRecord
{
        public $repeatPassword;
        /**
	 * Returns the static model of the specified AR class.
	 * @param string $className active record class name.
	 * @return Users the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'users';
	}
	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
                    return array(
        //array('date_of_creation, date_of_update, date_of_last_access', 'date_of_password_last_change', 'date'), // out, because date_of_last_access is populated when users logs in, date_of_creation and date_of_password_last_change is generated by postgresql from a trigger, same date_of_update
                    array('password','checkPasswordStrength','on'=>'register,reset'),
                    //array('password_old', 'checkOldPassword', 'dependentAttribute'=>'password', 'on'=>'updatePass'),
                    //array('password','checkIfSameAsOldPasssword', 'on'=>'updatePass'),
                    array('username,password,repeatPassword', 'required', 'on'=>'register,reset'),
                    array('email,firstname,lastname,phone,accesslevel', 'required', 'on'=>'create'),
                    //array('email','checkIfSameAsOldEmail', 'on'=>'updateEmail'),
                    array('username, email', 'unique', 'caseSensitive'=>false),
                    array('email','email'),
                    array('email', 'length', 'max'=>60),
                    array('Active, deleted', 'boolean'),
                    // verifyCode needs to be entered correctly
                   // array('verifyCode', 'captcha', 'allowEmpty'=>!CCaptcha::checkRequirements(), 'on'=>'captchaRequired, register, reset'), // see: http://www.yiiframework.com/forum/index.php/topic/21561-captcha-custom-validation/ for information
                    
                   // array('name', 'length', 'max'=>150),
                    array('username, password', 'length', 'max'=>45),
                    array('repeatPassword', 'compare', 'compareAttribute'=>'password', 'on'=>'reset,register'),
                    array('repeatPassword', 'safe'),
                    array('uid', 'numerical', 'integerOnly'=>true),
                    // The following rule is used by search().
                    // Please remove those attributes that should not be searched.
                    array('uid, username, dateOfCreation, dateOfLastAccess, email,  active, deleted', 'safe', 'on'=>'search'),
                    );

	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
            $labels = array(
			'uid' => 'ID',
			'username' => 'Username',
			'email' => 'Email',
                        'acesslevel'=>'User right',
                        'password' => 'Password',
			'salt' => 'Salt',
                        'Active'=>'Active',
                        'ActivationCode' => 'Activation Code',
                        'firstname' => 'Firstname',
                        'lastname'=>'Lastname',
                        'deleted' => 'Deleted Account',

                    );
            
                return $labels;
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
	 */
	public function search()
	{
		// Warning: Please modify the following code to remove attributes that
		// should not be searched.

		$criteria=new CDbCriteria;
		$criteria->compare('uid',$this->uid);
		$criteria->compare('username',$this->username,true);
		$criteria->compare('email',$this->email);
                
		
                $criteria->compare('active',$this->active);
                $criteria->compare('deleted',$this->deleted);
                
		
		$criteria->compare('dateOfCreation',$this->dateOfCreation);
		
		$criteria->compare('dateOfLastAccess',$this->dateOfLastAccess);
		

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}
          public function validatePassword($password)
       {
           return $this->hashPassword($password, $this->salt)===$this->password;
            
       }
     
       public function checkPasswordStrength($attribute){
           
            $uppercase = preg_match('@[A-Z]@', $this->password);
            $lowercase = preg_match('@[a-z]@', $this->password);
            $number    = preg_match('@[0-9]@', $this->password);
            
          if(!$uppercase || !$lowercase || !$number || strlen($this->password) < 8){ 
               $this->addError($attribute,"Minimum password requirement not matched. Password should be minimum 8 characters long and contain at least one UPPERCASE letter, one lowercase letter and one digit");
           }elseif(strcasecmp($this->password, $this->username)==0){
               $this->addError($attribute,'Password and username cannot be same');
           }
           
       }

       /**
        * Generates the password hash.
        * @param string password
        * @param string salt
        * @return string hash
        */
       public function hashPassword($password,$salt)
       {
               //$this->addError("password","Hasing: ".$password." with salt ".$this->salt." making: ".strtolower(sha1($password.$this->salt,false))." <br />");
               return strtolower(sha1($password.$this->salt,false));
       }
       public static function validateActivationKey($key){
               $user = Users::model()->findByAttributes(array('ActivationCode' => $key)); 
               if($user != null){
               $hours = (abs(time()-strtotime($user->ActivationTime))/60)/60;
               if($hours >= 24){
                     Yii::app()->user->setFlash('error','Verification key expired, please request a new key or contact administrator');
                     return false;
                   }else{
                       Yii::app()->user->setFlash('success','Verification succeded, please set new password and/or username');
                       return true;
                   }          
               }else{
                   Yii::app()->user->setFlash('error','Invalid Verification key, please request a new key or contact administrator');
                   return false;
               }
               
       }
       protected function beforeValidate(){
           //$this->name = ltrim($this->name,"[Deleted]"); //remvoe [Deleted] before validation to save from users using same name while registering in the system
           return true;
       }
       /**
        * 
        */
   protected function afterValidate() {
           parent::afterValidate();
           switch ($this->scenario){
                case "register":
                    if (strlen(trim($this->password))>0) {
                        $this->salt = self::generateSalt();
                        $this->password = $this->hashPassword($this->password, $this->salt);
                    }
                    break;
                case "reset":
                    if (strlen(trim($this->password))>0) {
                        $this->salt = self::generateSalt();
                        $this->password = $this->hashPassword($this->password, $this->salt);
                    }
                    break;
                case "create":
                   $this->dateOfCreation = date("Y-m-d H:i:s");
                    $this->ActivationTime = date("Y-m-d H:i:s");
                    break;
                
                    
                     
                     
            default:
                    break;
           }
             return true;
       } 

       /**
        * Generates a salt that can be used to generate a password hash.
        * @return string the salt
        */
       public static function generateSalt() {
           return uniqid('',true);
       }
       public static function getUsername($uid) {
          $mod = Users::model()->findByPk($uid);
       }

       public static function isDeleted($id=null) {
      
          if($id==null){
                $id = yii::app()->user->id;   
         }
          $u = Users::model()->findByPk($id);
          if ($u->deleted == 1){
              return true;
          }
          else{
              return false;
           }

       }
       
       public static function isActive($id=null) {
           if($id==null){
                $id = yii::app()->user->id;   
         }
          $u = Users::model()->findByPk($id);
          if ($u->Active == 1){
              return true;
          }
          else{
              return false;
           }
       }
       
       public static function checkLogin(){
           if(!Yii::app()->user->isGuest){
                if(!Users::isDeleted() && Users::isActive()){
                    return true;
                }
                elseif(Users::isDeleted()){
                    Users::logout();
                    Yii::app()->user->setFlash('error','You have been logged out by administrator, Please login again');
                    //$this->redirect(array('/site'));
                }
                elseif(!Users::isActive()){
                    Users::logout();
                    Yii::app()->user->setFlash('error','You have been logged out administrator, Please login again');
                    //$this->redirect(array('/site'));
                }
           }else{
               Yii::app()->user->setFlash('error','Please login first');
               
           }
       }
       public static function unsetSid(){
           $u = Users::model()->findByPk(yii::app()->user->id);
           $u->sid =null;
           $u->update(array('sid')); 
       }
        public static function setSid(){
           $u = Users::model()->findByPk(yii::app()->user->id);
           $u->sid =  session_id();
           $u->update(array('sid')); 
       }
       public static function isSuperAdmin($id=null){
           if (!yii::app()->user->isGuest){
               if($id==null){
                   $id = yii::app()->user->id;}
          $u = Users::model()->findByPk($id);
          if ($u->accesslevel == 1){
              return true;
          }else{
              return false;
           }}
       else {return false;}
       }
        public static function isAdmin(){
          if (!yii::app()->user->isGuest){
            $u = Users::model()->findByPk(yii::app()->user->id);
          if ($u->accesslevel == 2){
              return true;
          }else{
              return false;
          }
        } else{return false;}
        }
        public static function logout()
	{
                Users::unsetSid();
		Yii::app()->user->logout(true);
                 
                
	}
       
     
}
